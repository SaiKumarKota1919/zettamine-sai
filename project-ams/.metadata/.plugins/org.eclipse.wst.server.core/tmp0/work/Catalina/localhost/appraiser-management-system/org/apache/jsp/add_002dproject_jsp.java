/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.17
 * Generated at: 2024-01-02 17:56:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.zm.ams.services.impl.AmcAppraisalLocServiceImpl;
import com.zm.ams.dto.AppraisalLoc;
import com.zm.ams.services.impl.PropertyTypeServiceImpl;
import com.zm.ams.dto.PropertyType;
import com.zm.ams.dto.States;
import java.util.List;

public final class add_002dproject_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.zm.ams.services.impl.PropertyTypeServiceImpl");
    _jspx_imports_classes.add("com.zm.ams.dto.States");
    _jspx_imports_classes.add("com.zm.ams.services.impl.AmcAppraisalLocServiceImpl");
    _jspx_imports_classes.add("com.zm.ams.dto.PropertyType");
    _jspx_imports_classes.add("com.zm.ams.dto.AppraisalLoc");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <title>Add Project</title>\r\n");
      out.write("  <link rel=\"stylesheet\" href=\"css/form.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<a href=\"/appraiser-management-system/logout\" class=\"logout-link\">Logout</a> \r\n");
      out.write("<a href=\"/appraiser-management-system/home.jsp\" class=\"home-link\">Home</a>\r\n");
      out.write("  <form id=\"add-project-form\" action=\"project\">\r\n");
      out.write("    <h2>Add Project</h2>\r\n");
      out.write("    <input type =\"hidden\" name=\"action\" value=\"add\" />\r\n");
      out.write(" 	<label for=\"amcId\">AMC ID:</label>\r\n");
      out.write(" 	<input type=\"text\" name=\"amcId\" value=\"");
      out.print(request.getParameter("amcId"));
      out.write("\" readonly=\"readonly\">\r\n");
      out.write("    <label for=\"project-type\">Project Type:</label>\r\n");
      out.write("    <select id=\"project-type\" name=\"projectType\">\r\n");
      out.write("      <option value=\"\" selected disabled>Select project type</option>\r\n");
      out.write("      \r\n");
      out.write("    ");
 
    for(PropertyType propertyType : new PropertyTypeServiceImpl().getAllPropertyType())
    { 
      out.write("\r\n");
      out.write("    	<option value=\"");
      out.print(propertyType.getPropertyTypeId());
      out.write('"');
      out.write(' ');
      out.write('>');
      out.print(propertyType.getPropertyTypeDesc());
      out.write("</option>\r\n");
      out.write("    	\r\n");
      out.write("    	\r\n");
      out.write("  ");
   } 
      out.write("\r\n");
      out.write("   \r\n");
      out.write("    </select>\r\n");
      out.write("\r\n");
      out.write("    <label for=\"project-client\">Project Client:</label>\r\n");
      out.write("    <input type=\"text\" id=\"project-client\" name=\"projectClient\" placeholder=\"Enter project client\">\r\n");
      out.write("\r\n");
      out.write("    <label for=\"project-remarks\">Project Remarks:</label>\r\n");
      out.write("    <textarea id=\"project-remarks\" name=\"projectRemarks\" rows=\"4\" placeholder=\"Enter project remarks\"></textarea>\r\n");
      out.write("\r\n");
      out.write("    <label for=\"client-remarks\">Client Remarks:</label>\r\n");
      out.write("    <textarea id=\"client-remarks\" name=\"clientRemarks\" rows=\"4\" placeholder=\"Enter client remarks\"></textarea>\r\n");
      out.write("\r\n");
      out.write("    <label for=\"start-date\">Start Date:</label>\r\n");
      out.write("    <input type=\"date\" id=\"startDate\" name=\"startDate\">\r\n");
      out.write("\r\n");
      out.write("    <label for=\"end-date\">End Date:</label>\r\n");
      out.write("    <input type=\"date\" id=\"endDate\" name=\"endDate\">\r\n");
      out.write("<br><br><br>\r\n");
      out.write("\r\n");
      out.write("    <label for=\"state\">Select Location:</label>\r\n");
      out.write("   <select id=\"location\" name=\"location\">\r\n");
      out.write("      <option value=\"\" selected disabled>Select location</option>\r\n");
      out.write("     ");

     List<AppraisalLoc> list = new AmcAppraisalLocServiceImpl()
     							.getLocIdByAmcId(Integer.parseInt(request.getParameter("amcId")));
     for(AppraisalLoc appraisalLoc : list)
     { 		  
      
      out.write("\r\n");
      out.write("    	  <option value=\"");
      out.print( appraisalLoc.getLocId());
      out.write("\">\r\n");
      out.write("    	  ");
      out.print(States.valueOf(appraisalLoc.getState()).getStateName() +" - "+appraisalLoc.getCity());
      out.write("\r\n");
      out.write("    	  </option>\r\n");
      out.write("      ");

      }
      
      out.write("\r\n");
      out.write("    </select>\r\n");
      out.write("\r\n");
      out.write("    <label for=\"estimated-value\">Estimated Value:</label>\r\n");
      out.write("    <input type=\"text\" id=\"estimatedValue\" name=\"estimatedValue\" placeholder=\"Enter estimated value\">\r\n");
      out.write("\r\n");
      out.write("    <button type=\"submit\" >Add Project</button>\r\n");
      out.write("<button type=\"button\" class=\"cancel-button\" onclick=\"window.location.href='list-amc.jsp'\">Cancel</button>\r\n");
      out.write("  </form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
