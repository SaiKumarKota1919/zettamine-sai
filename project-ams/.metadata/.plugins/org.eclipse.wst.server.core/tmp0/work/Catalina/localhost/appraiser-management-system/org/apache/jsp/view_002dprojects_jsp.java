/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.17
 * Generated at: 2024-01-03 11:25:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.zm.ams.services.impl.LocationServiceImpl;
import com.zm.ams.services.impl.AppraisalLocationServiceImpl;
import com.zm.ams.dto.AppraisalLoc;
import com.zm.ams.services.impl.PropertyTypeServiceImpl;
import com.zm.ams.services.PropertyTypeService;
import com.zm.ams.dto.Project;
import com.zm.ams.dto.Amc;
import java.util.*;

public final class view_002dprojects_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  
  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.zm.ams.services.impl.AppraisalLocationServiceImpl");
    _jspx_imports_classes.add("com.zm.ams.dto.Project");
    _jspx_imports_classes.add("com.zm.ams.dto.Amc");
    _jspx_imports_classes.add("com.zm.ams.services.impl.PropertyTypeServiceImpl");
    _jspx_imports_classes.add("com.zm.ams.services.PropertyTypeService");
    _jspx_imports_classes.add("com.zm.ams.services.impl.LocationServiceImpl");
    _jspx_imports_classes.add("com.zm.ams.dto.AppraisalLoc");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <title>Search Results</title>\r\n");
      out.write(" <link rel=\"stylesheet\" href=\"css/view-projects.css\">\r\n");
      out.write(" <script src=\"sort.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<style>\r\n");
      out.write("*{\r\n");
      out.write("\r\n");
      out.write("font-size:14px;\r\n");
      out.write("font-family:sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("  <h2 style=\"text-align:center;\">Search Results</h2>\r\n");
      out.write("<a href=\"/appraiser-management-system/list-amc.jsp\" class=\"back-link\">Back</a>\r\n");
      out.write("<a href=\"/appraiser-management-system/logout\" class=\"logout-link\">Logout</a> \r\n");
      out.write("<a href=\"/appraiser-management-system/home.jsp\" class=\"home-link\">Home</a>\r\n");
      out.write("\r\n");
      out.write("  <table class=\"view-projects\">\r\n");
      out.write("    <thead>\r\n");
      out.write("      <tr>\r\n");
      out.write("        <th>Project Client</th>\r\n");
      out.write("        <th>Project Type</th>\r\n");
      out.write("        <th>State</th>\r\n");
      out.write("        <th>City</th>\r\n");
      out.write("        <th>Start Date</th>\r\n");
      out.write("        <th>End Date</th>\r\n");
      out.write("        <th>Estimate Value</th>\r\n");
      out.write("      </tr>\r\n");
      out.write("    </thead>\r\n");
      out.write("    <tbody>\r\n");
      out.write("  \r\n");
      out.write(" ");
List<Project> list =	(List<Project>)session.getAttribute("projectsList"); 
 	
 		for(Project p : list)
 		{
 			AppraisalLoc appraisalLocs = new LocationServiceImpl()
 									.getLocationByLocId(p.getLocationId());
 			System.out.print(appraisalLocs);
 			
 	
      out.write("	\r\n");
      out.write(" 		<tr>\r\n");
      out.write(" 		<td>");
      out.print(p.getProjectClient() );
      out.write("</td>\r\n");
      out.write(" 		<td>");
      out.print(new PropertyTypeServiceImpl().getPropertyTypeById(p.getPropertyTypeId())
 					.getPropertyTypeDesc() );
      out.write("</td>\r\n");
      out.write(" 		<td>");
      out.print(appraisalLocs.getState());
      out.write("</td>\r\n");
      out.write(" 		<td>");
      out.print(appraisalLocs.getCity());
      out.write("</td>\r\n");
      out.write(" 		<td>");
      out.print(p.getProjectStartDate());
      out.write("</td>\r\n");
      out.write(" 		<td>");
      out.print(p.getProjectEndDate());
      out.write("</td>\r\n");
      out.write(" 		<td>");
      out.print(p.getEstimateValue());
      out.write("</td>\r\n");
      out.write(" 		</tr>\r\n");
      out.write(" 	");
	}
 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </tbody>\r\n");
      out.write("  </table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
